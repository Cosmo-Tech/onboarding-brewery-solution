<?xml version="1.0" encoding="UTF-8"?>
<csm:Model xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:doc="http://www.cosmotech.com/csm_doc/11.0" xmlns:dbk="http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" xmlns:csm="http://www.cosmotech.com/csm/11.0">
  <csm:ModelName>MyBrewery</csm:ModelName>
  <csm:DataType xsi:type="csm:BoolType" name="Boolean"/>
  <csm:DataType xsi:type="csm:IntType" name="Integer" bits="32" signed="1"/>
  <csm:DataType xsi:type="csm:FloatType" name="FloatingPoint" bits="32"/>
  <csm:DataType xsi:type="csm:StringType" name="String"/>
  <csm:BasicEntity name="Customer">
    <csm:Rule name="Perceive">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[int satisfaction = 0;
int count = 0;
// iterate over calling entity neighbors and sum their satisfaction values
csmForEachTypedNeighbor(BE_Customer, neighbor)
{
  satisfaction += neighbor->GetCustomerToCustomer(this); // call the neighbor communicator
  count++;
}
int avrg = int(float(satisfaction) / float(csm::Math::Max(count, 1)));
SetSurroundingSatisfaction(avrg);]]></csm:Code>
      </csm:Implementation>
      <csm:EnvironmentReference>CustomerGraph</csm:EnvironmentReference>
    </csm:Rule>
    <csm:Rule name="React">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[int satisfaction = GetSatisfaction();
// customer satisfaction is influenced by surrounding satisfaction
if (satisfaction > GetSurroundingSatisfaction())
{
  SetSatisfaction(satisfaction - 1);
}
else if (satisfaction < GetSurroundingSatisfaction())
{
  SetSatisfaction(satisfaction + 1);
}]]></csm:Code>
      </csm:Implementation>
      <csm:EnvironmentReference>CustomerGraph</csm:EnvironmentReference>
    </csm:Rule>
    <csm:Process name="Update">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[// Generate a random value between 1 and 10
int test = rand()%10 + GetSatisfaction();
// If the customer is not thirsty and the random value is strictly
// greater than 5, make the customer thirsty
if (!GetThirsty() && test > 5)
{
  SetThirsty(true);
}]]></csm:Code>
      </csm:Implementation>
    </csm:Process>
    <csm:State xsi:type="csm:CompositeType" name="CustomerState">
      <csm:Container>
        <csm:Attribute name="Thirsty" modifier="Variable">
          <csm:DataTypeReference>Boolean</csm:DataTypeReference>
        </csm:Attribute>
        <csm:Attribute name="Satisfaction" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
        </csm:Attribute>
        <csm:Attribute name="SurroundingSatisfaction" modifier="Variable">
          <csm:DataTypeReference>FloatingPoint</csm:DataTypeReference>
        </csm:Attribute>
      </csm:Container>
    </csm:State>
    <csm:Communicator name="CustomerToCustomer">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[return GetSatisfaction();]]></csm:Code>
      </csm:Implementation>
      <csm:CommunicatedReference>Integer</csm:CommunicatedReference>
      <csm:Destination>Customer</csm:Destination>
    </csm:Communicator>
  </csm:BasicEntity>
  <csm:CompoundEntity name="Bar">
    <csm:Process name="Serve">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[// threshold value representing the level of business of the bar waiters
int thirsty = GetNbThirstyCustomers();
int waiters = GetNbWaiters();
int threshold = int(10.f * float(waiters) / float(csm::Math::Max(thirsty, 1)));

// Iterate over all sub-entities of type BE_Customer
csmForEachTypedSubEntity(BE_Customer, customer)
{
  // First check if the customer is thirsty and if drinks are available in stock
  // then decrease the stock by 1 unit and make the customer not thirsty.
  if (customer->GetThirsty())
  {
    // compute test value for waiter's availability
    int test = rand()%10 + 1;
    // if waiter and drinks are available then decrease the stock by 1 unit,
    // make the customer not thirsty and increase its satisfaction
    if (test <= threshold && GetStock() > 0)
    {
      SetStock(GetStock() - 1);
      customer->SetThirsty(false);
      customer->SetSatisfaction(customer->GetSatisfaction() + 1);
    }
    // otherwise decrease the customer's satisfaction (it cannot be <0)
    else if (customer->GetSatisfaction() > 0)
    {
      customer->SetSatisfaction(customer->GetSatisfaction() - 1);
    }
  }
}]]></csm:Code>
      </csm:Implementation>
    </csm:Process>
    <csm:Process name="Restock">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[if (GetStock() <= GetRestockThreshold())
{
  SetStock(GetStock() + GetRestockQty());
}]]></csm:Code>
      </csm:Implementation>
    </csm:Process>
    <csm:State xsi:type="csm:CompositeType" name="BarState">
      <csm:Container>
        <csm:Attribute name="Stock" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
          <csm:DefaultValue>10</csm:DefaultValue>
        </csm:Attribute>
        <csm:Attribute name="RestockQty" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
          <csm:DefaultValue>10</csm:DefaultValue>
        </csm:Attribute>
        <csm:Attribute name="NbWaiters" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
          <csm:DefaultValue>2</csm:DefaultValue>
        </csm:Attribute>
        <csm:Attribute name="RestockThreshold" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
          <csm:DefaultValue>5</csm:DefaultValue>
        </csm:Attribute>
      </csm:Container>
    </csm:State>
    <csm:MesoFunction name="UpdateAverageSatisfaction">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[]]></csm:Code>
      </csm:Implementation>
      <csm:Operations>
        <csm:Operation xsi:type="csm:MesoAverage" target="AverageSatisfaction" subEntityAttribute="Satisfaction"/>
      </csm:Operations>
    </csm:MesoFunction>
    <csm:MesoFunction name="UpdateNbThirstyCustomers">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[]]></csm:Code>
      </csm:Implementation>
      <csm:Operations>
        <csm:Operation xsi:type="csm:MesoValueCount" target="NbThirstyCustomers" subEntityAttribute="Thirsty" attributeValue="true"/>
      </csm:Operations>
    </csm:MesoFunction>
    <csm:MesoState xsi:type="csm:CompositeType" name="BarMesoState">
      <csm:Container>
        <csm:Attribute name="AverageSatisfaction" modifier="Variable">
          <csm:DataTypeReference>FloatingPoint</csm:DataTypeReference>
        </csm:Attribute>
        <csm:Attribute name="NbThirstyCustomers" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
        </csm:Attribute>
      </csm:Container>
    </csm:MesoState>
    <csm:Compound>
      <csm:Environment>CustomerGraph</csm:Environment>
      <csm:SubEntities>
        <csm:CanBeWithin>Customer</csm:CanBeWithin>
      </csm:SubEntities>
    </csm:Compound>
  </csm:CompoundEntity>
  <csm:Environment xsi:type="csm:NoEnvironment" name="NoEnvironment"/>
  <csm:Environment xsi:type="csm:Graph" name="CustomerGraph">
    <csm:Arc name="Satisfaction">
      <csm:Source>Customer</csm:Source>
      <csm:Destination>Customer</csm:Destination>
    </csm:Arc>
  </csm:Environment>
</csm:Model>
