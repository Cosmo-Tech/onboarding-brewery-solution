<?xml version="1.0" encoding="UTF-8"?>
<!--
  Language: XML
  $Author:$
  $Date:$
  $Revision$
  $Copyright: [2010-2017] Cosmo Tech, All Rights Reserved $
-->
<csm:Model xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:doc="http://www.cosmotech.com/csm_doc/10.2" xmlns:dbk="http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" xmlns:csm="http://www.cosmotech.com/csm/10.2">
  <csm:ModelName>MyBrewery</csm:ModelName>
  <csm:DataType xsi:type="csm:BoolType" name="Boolean"/>
  <csm:DataType xsi:type="csm:IntType" name="Integer" bits="32" signed="1"/>
  <csm:DataType xsi:type="csm:FloatType" name="FloatingPoint" bits="32"/>
  <csm:DataType xsi:type="csm:StringType" name="String"/>
  <csm:BasicEntity name="Customer">
    <csm:Rule name="Perceive">
      <csm:Implementation language="python">
        <csm:Code><![CDATA[satisfaction = 0;
count = 0;
# iterate over calling entity neighbors and sum their satisfaction values
for n in GetContext().GetSchedulerEnvironment().GetNeighbors(self):
  # call the neighbor communicator
  satisfaction+=csm.engine.BE_Customer.Cast(n).GetCustomerToCustomer(self).Get()
  count+=1
avrg = satisfaction / max(count, 1)
self.SetSurroundingSatisfaction(avrg)]]></csm:Code>
      </csm:Implementation>
      <csm:EnvironmentReference>CustomerGraph</csm:EnvironmentReference>
    </csm:Rule>
    <csm:Rule name="React">
      <csm:Implementation language="python">
        <csm:Code><![CDATA[satisfaction = self.GetSatisfaction().Get();
# customer satisfaction is influenced by surrounding satisfaction
if satisfaction > self.GetSurroundingSatisfaction().Get():
  self.SetSatisfaction(satisfaction - 1)
elif satisfaction < self.GetSurroundingSatisfaction().Get():
  self.SetSatisfaction(satisfaction + 1)]]></csm:Code>
      </csm:Implementation>
      <csm:EnvironmentReference>CustomerGraph</csm:EnvironmentReference>
    </csm:Rule>
    <csm:Process name="Update">
      <csm:Implementation language="python">
        <csm:Code><![CDATA[import random
# Generate a random value between 1 and 10
test = random.randint(1, 10) + self.GetSatisfaction().Get()
# If the customer is not thirsty and the random value is strictly
# greater than 5, make the customer thirsty
if not self.GetThirsty().Get() & test>5:
  self.SetThirsty(True)]]></csm:Code>
      </csm:Implementation>
    </csm:Process>
    <csm:State xsi:type="csm:CompositeType" name="CustomerState">
      <csm:Container>
        <csm:Attribute name="Thirsty" modifier="Variable">
          <csm:DataTypeReference>Boolean</csm:DataTypeReference>
        </csm:Attribute>
        <csm:Attribute name="Satisfaction" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
        </csm:Attribute>
        <csm:Attribute name="SurroundingSatisfaction" modifier="Variable">
          <csm:DataTypeReference>FloatingPoint</csm:DataTypeReference>
        </csm:Attribute>
      </csm:Container>
    </csm:State>
    <csm:Communicator name="CustomerToCustomer">
      <csm:Implementation language="python">
        <csm:Code><![CDATA[return self.GetSatisfaction()]]></csm:Code>
      </csm:Implementation>
      <csm:CommunicatedReference>Integer</csm:CommunicatedReference>
      <csm:Destination>Customer</csm:Destination>
    </csm:Communicator>
  </csm:BasicEntity>
  <csm:CompoundEntity name="Bar">
    <csm:Process name="Serve">
      <csm:Implementation language="python">
        <csm:Code><![CDATA[
import random

# threshold value representing the level of business of the bar waiters
thirsty = self.GetNbThirstyCustomers().Get()
waiters = self.GetNbWaiters().Get()
threshold = 10 * waiters / max(thirsty, 1)

# Iterate over all sub-entities of type BE_Customer
for c in self.GetSubEntities():
  # First check if the customer is thirsty and if drinks are available in stock
  # then decrease the stock by 1 unit and make the customer not thirsty.
  customer = csm.engine.BE_Customer.Cast(c)
  if customer.GetThirsty().Get():
    # compute test value for waiter's availability
    test = random.randint(1, 10)
    # if waiter and drinks are available then decrease the stock by 1 unit,
    # make the customer not thirsty and increase its satisfaction
    if (test <= threshold) & (self.GetStock().Get() > 0):
      self.SetStock(self.GetStock().Get() - 1)
      customer.SetThirsty(False)
      customer.SetSatisfaction(customer.GetSatisfaction().Get() + 1)
    # otherwise decrease the customer's satisfaction (it cannot be <0)
    elif customer.GetSatisfaction().Get() > 0:
      customer.SetSatisfaction(customer.GetSatisfaction().Get() - 1)
]]></csm:Code>
      </csm:Implementation>
    </csm:Process>
    <csm:Process name="Restock">
      <csm:Implementation language="python">
        <csm:Code><![CDATA[if self.GetStock().Get() <= self.GetRestockThreshold().Get():
  self.SetStock(self.GetStock().Get() + self.GetRestockQty().Get())]]></csm:Code>
      </csm:Implementation>
    </csm:Process>
    <csm:State xsi:type="csm:CompositeType" name="BarState">
      <csm:Container>
        <csm:Attribute name="Stock" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
          <csm:DefaultValue>10</csm:DefaultValue>
        </csm:Attribute>
        <csm:Attribute name="RestockQty" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
          <csm:DefaultValue>10</csm:DefaultValue>
        </csm:Attribute>
        <csm:Attribute name="NbWaiters" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
          <csm:DefaultValue>2</csm:DefaultValue>
        </csm:Attribute>
        <csm:Attribute name="RestockThreshold" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
          <csm:DefaultValue>5</csm:DefaultValue>
        </csm:Attribute>
      </csm:Container>
    </csm:State>
    <csm:MesoFunction name="UpdateAverageSatisfaction">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[]]></csm:Code>
      </csm:Implementation>
      <csm:Operations>
        <csm:Operation xsi:type="csm:MesoAverage" target="AverageSatisfaction" subEntityAttribute="Satisfaction"/>
      </csm:Operations>
    </csm:MesoFunction>
    <csm:MesoFunction name="UpdateNbThirstyCustomers">
      <csm:Implementation language="cpp">
        <csm:Code><![CDATA[]]></csm:Code>
      </csm:Implementation>
      <csm:Operations>
        <csm:Operation xsi:type="csm:MesoValueCount" target="NbThirstyCustomers" subEntityAttribute="Thirsty" attributeValue="true"/>
      </csm:Operations>
    </csm:MesoFunction>
    <csm:MesoState xsi:type="csm:CompositeType" name="BarMesoState">
      <csm:Container>
        <csm:Attribute name="AverageSatisfaction" modifier="Variable">
          <csm:DataTypeReference>FloatingPoint</csm:DataTypeReference>
        </csm:Attribute>
        <csm:Attribute name="NbThirstyCustomers" modifier="Variable">
          <csm:DataTypeReference>Integer</csm:DataTypeReference>
        </csm:Attribute>
      </csm:Container>
    </csm:MesoState>
    <csm:Compound>
      <csm:Environment>CustomerGraph</csm:Environment>
      <csm:SubEntities>
        <csm:CanBeWithin>Customer</csm:CanBeWithin>
      </csm:SubEntities>
    </csm:Compound>
  </csm:CompoundEntity>
  <csm:Environment xsi:type="csm:NoEnvironment" name="NoEnvironment"/>
  <csm:Environment xsi:type="csm:Graph" name="CustomerGraph">
    <csm:Arc name="Satisfaction">
      <csm:Source>Customer</csm:Source>
      <csm:Destination>Customer</csm:Destination>
    </csm:Arc>
  </csm:Environment>
</csm:Model>
